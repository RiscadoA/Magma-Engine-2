#include "INIDocument.hpp"

#include <regex>
#include <sstream>

void Magma::INIDocument::Serialize(std::wostream & stream) const
{
	stream << L"#!INI " << MajorVersion << L'.' << MinorVersion << L'\n'; // Mark the beginning of the document and its version
	stream << L"# This document was automatically generated by the Magma Engine" << L'\n' << L'\n';

	if (m_data.find(L"") != m_data.end())
		for (auto& key : m_data.at(L""))
		{
			stream << key.first << L'=' << key.second << L'\n';
		}
	stream << L'\n';

	for (auto& section : m_data)
	{
		if (section.first == L"")
			continue;

		stream << L'[' << section.first << L']' << L'\n';
		for (auto& key : section.second)
		{
			stream << key.first << L'=' << key.second << L'\n';
		}
		stream << L'\n';
	}

	stream << L"#!end" << std::flush; // Mark the end of the document (used when storing multiple documents in a stream)
}

void Magma::INIDocument::Deserialize(std::wistream & stream)
{
	m_data.clear();

	std::wstring line;

	while (true) // Find header
	{
		if (stream.get() == L'#' && stream.peek() == L'!')
		{
			stream.ignore();
			break;
		}
		if (stream.eof())
			throw FailedToDeserializeException("Failed to deserialize INI Document, didn't find header");
	}

	// Check version
	{
		int major, minor;

		std::getline(stream, line);
		std::wregex reg(LR"reg(INI (\d+).(\d+))reg");

		std::wsmatch match;
		if (!std::regex_match(line, match, reg))
			throw FailedToDeserializeException("Failed to deserialize INI document, invalid header (couldn't get version)");
		major = std::stoi(match.str(1));
		minor = std::stoi(match.str(2));

		if (major != MajorVersion || minor < MinorVersion)
			throw FailedToDeserializeException(("Failed to deserialize INI document, unsupported major version, current version is " + std::to_string(MajorVersion) + "." + std::to_string(MinorVersion)).c_str());
	}

	// Read data
	m_data = { {} };
	
	std::wstring section = L"";
	std::wregex keyRegex(LR"reg(([^=]+)=([^\n]*))reg");
	std::wsmatch keyMatch;

	while (std::getline(stream, line))
	{
		if (line.empty() || line[line.find_first_not_of(L' ')] == L'#')
		{
			if (line.size() >= 5 && line.substr(0, 5) == L"#!end")
				break;
			else
				continue;
		}
		else if (line[line.find_first_not_of(L' ')] == L'[')
		{
			section = L"";
			std::wstringstream ss(line);
			ss.ignore();
			
			while (ss.peek() != L']')
				section += ss.get();
			continue;
		}

		if (std::regex_match(line, keyMatch, keyRegex))
		{
			m_data[section][keyMatch.str(1)] = keyMatch.str(2);
		}
		else throw FailedToDeserializeException("Failed to deserialize INI document, invalid key");
	}
}